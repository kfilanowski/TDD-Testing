var cov_ateh8ow58=function(){var path="/Users/kevinfilanowski/Documents/School/WCU/CS/CS253 Software Development/Git Repo/JS_project3/app/data_structures.js",hash="f3c6646d67921e70db0bffd9e92edde3a60f9ea9",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/kevinfilanowski/Documents/School/WCU/CS/CS253 Software Development/Git Repo/JS_project3/app/data_structures.js",statementMap:{"0":{start:{line:13,column:15},end:{line:13,column:34}},"1":{start:{line:14,column:1},end:{line:14,column:31}},"2":{start:{line:15,column:1},end:{line:15,column:29}},"3":{start:{line:16,column:1},end:{line:16,column:39}},"4":{start:{line:17,column:1},end:{line:17,column:37}},"5":{start:{line:29,column:2},end:{line:29,column:32}},"6":{start:{line:31,column:2},end:{line:49,column:3}},"7":{start:{line:33,column:21},end:{line:33,column:23}},"8":{start:{line:36,column:20},end:{line:36,column:35}},"9":{start:{line:38,column:4},end:{line:45,column:5}},"10":{start:{line:41,column:6},end:{line:44,column:39}},"11":{start:{line:42,column:8},end:{line:42,column:41}},"12":{start:{line:44,column:8},end:{line:44,column:39}},"13":{start:{line:46,column:4},end:{line:46,column:22}},"14":{start:{line:48,column:4},end:{line:48,column:28}},"15":{start:{line:61,column:2},end:{line:61,column:32}},"16":{start:{line:63,column:2},end:{line:83,column:3}},"17":{start:{line:65,column:20},end:{line:65,column:22}},"18":{start:{line:68,column:25},end:{line:68,column:47}},"19":{start:{line:71,column:21},end:{line:71,column:36}},"20":{start:{line:74,column:15},end:{line:74,column:38}},"21":{start:{line:77,column:4},end:{line:78,column:72}},"22":{start:{line:78,column:6},end:{line:78,column:72}},"23":{start:{line:80,column:4},end:{line:80,column:21}},"24":{start:{line:82,column:4},end:{line:82,column:28}},"25":{start:{line:97,column:2},end:{line:97,column:32}},"26":{start:{line:99,column:2},end:{line:138,column:3}},"27":{start:{line:101,column:25},end:{line:101,column:27}},"28":{start:{line:104,column:20},end:{line:104,column:35}},"29":{start:{line:107,column:20},end:{line:107,column:38}},"30":{start:{line:110,column:4},end:{line:126,column:5}},"31":{start:{line:113,column:6},end:{line:115,column:7}},"32":{start:{line:114,column:8},end:{line:114,column:46}},"33":{start:{line:120,column:6},end:{line:125,column:7}},"34":{start:{line:121,column:8},end:{line:124,column:65}},"35":{start:{line:122,column:10},end:{line:122,column:67}},"36":{start:{line:124,column:10},end:{line:124,column:65}},"37":{start:{line:130,column:6},end:{line:133,column:61}},"38":{start:{line:131,column:8},end:{line:131,column:63}},"39":{start:{line:133,column:8},end:{line:133,column:61}},"40":{start:{line:135,column:4},end:{line:135,column:26}},"41":{start:{line:137,column:4},end:{line:137,column:28}},"42":{start:{line:151,column:2},end:{line:151,column:32}},"43":{start:{line:153,column:2},end:{line:188,column:3}},"44":{start:{line:155,column:22},end:{line:155,column:25}},"45":{start:{line:158,column:15},end:{line:158,column:43}},"46":{start:{line:163,column:24},end:{line:163,column:43}},"47":{start:{line:169,column:4},end:{line:184,column:5}},"48":{start:{line:170,column:6},end:{line:170,column:53}},"49":{start:{line:172,column:6},end:{line:175,column:7}},"50":{start:{line:174,column:8},end:{line:174,column:59}},"51":{start:{line:178,column:6},end:{line:181,column:7}},"52":{start:{line:179,column:8},end:{line:180,column:22}},"53":{start:{line:183,column:6},end:{line:183,column:24}},"54":{start:{line:185,column:4},end:{line:185,column:25}},"55":{start:{line:187,column:4},end:{line:187,column:28}},"56":{start:{line:199,column:14},end:{line:199,column:16}},"57":{start:{line:200,column:23},end:{line:200,column:28}},"58":{start:{line:204,column:3},end:{line:213,column:4}},"59":{start:{line:205,column:3},end:{line:212,column:18}},"60":{start:{line:209,column:5},end:{line:209,column:21}},"61":{start:{line:211,column:5},end:{line:212,column:18}},"62":{start:{line:212,column:6},end:{line:212,column:18}},"63":{start:{line:216,column:3},end:{line:216,column:15}}},fnMap:{"0":{name:"wordCount",decl:{start:{line:27,column:9},end:{line:27,column:18}},loc:{start:{line:27,column:25},end:{line:50,column:1}},line:27},"1":{name:"wordFreq",decl:{start:{line:59,column:9},end:{line:59,column:17}},loc:{start:{line:59,column:24},end:{line:84,column:1}},line:59},"2":{name:"condWordCount",decl:{start:{line:95,column:9},end:{line:95,column:22}},loc:{start:{line:95,column:29},end:{line:139,column:1}},line:95},"3":{name:"condWordFreq",decl:{start:{line:149,column:9},end:{line:149,column:21}},loc:{start:{line:149,column:28},end:{line:189,column:1}},line:149},"4":{name:"removeDelimiters",decl:{start:{line:198,column:10},end:{line:198,column:26}},loc:{start:{line:198,column:33},end:{line:217,column:2}},line:198}},branchMap:{"0":{loc:{start:{line:31,column:2},end:{line:49,column:3}},type:"if",locations:[{start:{line:31,column:2},end:{line:49,column:3}},{start:{line:31,column:2},end:{line:49,column:3}}],line:31},"1":{loc:{start:{line:41,column:6},end:{line:44,column:39}},type:"if",locations:[{start:{line:41,column:6},end:{line:44,column:39}},{start:{line:41,column:6},end:{line:44,column:39}}],line:41},"2":{loc:{start:{line:63,column:2},end:{line:83,column:3}},type:"if",locations:[{start:{line:63,column:2},end:{line:83,column:3}},{start:{line:63,column:2},end:{line:83,column:3}}],line:63},"3":{loc:{start:{line:99,column:2},end:{line:138,column:3}},type:"if",locations:[{start:{line:99,column:2},end:{line:138,column:3}},{start:{line:99,column:2},end:{line:138,column:3}}],line:99},"4":{loc:{start:{line:113,column:6},end:{line:115,column:7}},type:"if",locations:[{start:{line:113,column:6},end:{line:115,column:7}},{start:{line:113,column:6},end:{line:115,column:7}}],line:113},"5":{loc:{start:{line:120,column:6},end:{line:125,column:7}},type:"if",locations:[{start:{line:120,column:6},end:{line:125,column:7}},{start:{line:120,column:6},end:{line:125,column:7}}],line:120},"6":{loc:{start:{line:121,column:8},end:{line:124,column:65}},type:"if",locations:[{start:{line:121,column:8},end:{line:124,column:65}},{start:{line:121,column:8},end:{line:124,column:65}}],line:121},"7":{loc:{start:{line:130,column:6},end:{line:133,column:61}},type:"if",locations:[{start:{line:130,column:6},end:{line:133,column:61}},{start:{line:130,column:6},end:{line:133,column:61}}],line:130},"8":{loc:{start:{line:153,column:2},end:{line:188,column:3}},type:"if",locations:[{start:{line:153,column:2},end:{line:188,column:3}},{start:{line:153,column:2},end:{line:188,column:3}}],line:153},"9":{loc:{start:{line:205,column:3},end:{line:212,column:18}},type:"if",locations:[{start:{line:205,column:3},end:{line:212,column:18}},{start:{line:205,column:3},end:{line:212,column:18}}],line:205},"10":{loc:{start:{line:205,column:7},end:{line:208,column:22}},type:"binary-expr",locations:[{start:{line:205,column:7},end:{line:205,column:22}},{start:{line:205,column:26},end:{line:205,column:41}},{start:{line:205,column:45},end:{line:205,column:60}},{start:{line:205,column:64},end:{line:205,column:78}},{start:{line:206,column:8},end:{line:206,column:22}},{start:{line:206,column:26},end:{line:206,column:40}},{start:{line:206,column:44},end:{line:206,column:59}},{start:{line:206,column:63},end:{line:206,column:78}},{start:{line:207,column:8},end:{line:207,column:22}},{start:{line:207,column:26},end:{line:207,column:40}},{start:{line:207,column:44},end:{line:207,column:58}},{start:{line:207,column:62},end:{line:207,column:76}},{start:{line:208,column:8},end:{line:208,column:22}}],line:205},"11":{loc:{start:{line:211,column:5},end:{line:212,column:18}},type:"if",locations:[{start:{line:211,column:5},end:{line:212,column:18}},{start:{line:211,column:5},end:{line:212,column:18}}],line:211}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0,0,0,0,0,0,0,0,0,0],"11":[0,0]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/**
 * Determines some information about a string of words, or words input from a
 * file. This information includes the number of occurences of each word in
 * the file, the frequency at which those words appear, as well as which
 * words exactly follow each word and their amount and frequencies.
 * There is a possible use for deciphering secret texts by analyzing which
 * words appear often and after what other word,which in turn can be compared
 * to traditional language to determine text.
 * @author Kevin Filanowski
 * @version 04/16/18
 **/var exports=(cov_ateh8ow58.s[0]++,module.exports={});cov_ateh8ow58.s[1]++;exports.wordCount=wordCount;cov_ateh8ow58.s[2]++;exports.wordFreq=wordFreq;cov_ateh8ow58.s[3]++;exports.condWordCount=condWordCount;cov_ateh8ow58.s[4]++;exports.condWordFreq=condWordFreq;/**
 * This function counts the number of occurences of a word in a given string.
 * An object is formed containing key value pairs, with the keys being the word
 * and the value being the amount of times the word appears in the string.
 * @param {String} data - The contents of the file.
 * @return {Object} - Object containing all of the word occurences in the
 * string.
 **/function wordCount(data){cov_ateh8ow58.f[0]++;cov_ateh8ow58.s[5]++;//Remove any odd delimiters before processing.
data=removeDelimiters(data);cov_ateh8ow58.s[6]++;if(data.length>0){cov_ateh8ow58.b[0][0]++;/** wordCount object will count how many words appear in the data.**/var _wordCount=(cov_ateh8ow58.s[7]++,{});/** Create an array with all of the words split by escape characters. **/var wordArray=(cov_ateh8ow58.s[8]++,data.split(" "));cov_ateh8ow58.s[9]++;for(var index in wordArray){cov_ateh8ow58.s[10]++;//Does the word exist in the array? Create a property and set to 1,
//else increment the value by 1.
if(_wordCount[wordArray[index]]==undefined){cov_ateh8ow58.b[1][0]++;cov_ateh8ow58.s[11]++;_wordCount[wordArray[index]]=1;}else{cov_ateh8ow58.b[1][1]++;cov_ateh8ow58.s[12]++;_wordCount[wordArray[index]]++;}}cov_ateh8ow58.s[13]++;return _wordCount;}else{cov_ateh8ow58.b[0][1]++;cov_ateh8ow58.s[14]++;return"Input is empty";}}//END WORDCOUNT
/**
 * This function determines the frequency in which a word occurs in a given
 * object containing all of the words and their occurences.
 * @param {String} data - The contents of the file.
 * @return {Object} - object containing the words and the frequency in which
 * they occur.
 **/function wordFreq(data){cov_ateh8ow58.f[1]++;cov_ateh8ow58.s[15]++;//Remove any odd delimiters before processing.
data=removeDelimiters(data);cov_ateh8ow58.s[16]++;if(data.length>0){cov_ateh8ow58.b[2][0]++;/** The wordFreq object, to store all of the frequency information. **/var _wordFreq=(cov_ateh8ow58.s[17]++,{});/** The total amount of words in the variable data. **/var totalWordCount=(cov_ateh8ow58.s[18]++,data.split(" ").length);/** Object containing all of the word occurences in the string. **/var _wordCount=(cov_ateh8ow58.s[19]++,wordCount(data));/** Retrieve all of the keys from the object. **/var keys=(cov_ateh8ow58.s[20]++,Object.keys(_wordCount));//Computation for word frequencies.
cov_ateh8ow58.s[21]++;for(var index=0;index<keys.length;index++){cov_ateh8ow58.s[22]++;_wordFreq[keys[index]]=_wordCount[keys[index]]/totalWordCount;}cov_ateh8ow58.s[23]++;return _wordFreq;}else{cov_ateh8ow58.b[2][1]++;cov_ateh8ow58.s[24]++;return"Input is empty";}}//END WORDFREQ
/**
 * This function determines both how many and what words occur after each word
 * and stores that information in an object with objects as values.
 * @param {String} data - The contents of the file.
 * @return {Object} - Object containing keys with unique words, and values
 * consisting of one object with key-value pairs that determine what word
 * and how many words are after the original word (key).
 * I.E: {Blue : {Red: 1, Green: 2}, Red: {Green: 1, Red: 2, Blue: 1}, etc: {}}
 **/function condWordCount(data){cov_ateh8ow58.f[2]++;cov_ateh8ow58.s[25]++;//Remove any odd delimiters before processing.
data=removeDelimiters(data);cov_ateh8ow58.s[26]++;if(data.length>0){cov_ateh8ow58.b[3][0]++;/** The wordFreq object, to store all of the word count information. **/var _condWordCount=(cov_ateh8ow58.s[27]++,{});/** Create an array with all of the words split by escape characters. **/var wordArray=(cov_ateh8ow58.s[28]++,data.split(' '));/** The last element's index in the wordArray. This is used in Case 2. **/var lastIndex=(cov_ateh8ow58.s[29]++,wordArray.length-1);//Begin by traversing through every word in wordArray (data).
cov_ateh8ow58.s[30]++;for(var index=0;index<wordArray.length;index++){cov_ateh8ow58.s[31]++;//If the word is not in the array, initialize the key word with
//an empty object.
if(_condWordCount[wordArray[index]]==undefined){cov_ateh8ow58.b[4][0]++;cov_ateh8ow58.s[32]++;_condWordCount[wordArray[index]]={};}else{cov_ateh8ow58.b[4][1]++;}//CASE 1: Neighboring Elements
//Traverse through the array and add the current element to the previous
//entry, initializing it as needed.
cov_ateh8ow58.s[33]++;if(index>0){cov_ateh8ow58.b[5][0]++;cov_ateh8ow58.s[34]++;if(_condWordCount[wordArray[index-1]][wordArray[index]]==undefined){cov_ateh8ow58.b[6][0]++;cov_ateh8ow58.s[35]++;_condWordCount[wordArray[index-1]][wordArray[index]]=1;}else{cov_ateh8ow58.b[6][1]++;cov_ateh8ow58.s[36]++;_condWordCount[wordArray[index-1]][wordArray[index]]++;}}else{cov_ateh8ow58.b[5][1]++;}}//CASE 2: First-and-Last
//Consider the case where the first element follows the last element.
cov_ateh8ow58.s[37]++;if(_condWordCount[wordArray[lastIndex]][wordArray[0]]==undefined){cov_ateh8ow58.b[7][0]++;cov_ateh8ow58.s[38]++;_condWordCount[wordArray[lastIndex]][wordArray[0]]=1;}else{cov_ateh8ow58.b[7][1]++;cov_ateh8ow58.s[39]++;_condWordCount[wordArray[lastIndex]][wordArray[0]]++;}cov_ateh8ow58.s[40]++;return _condWordCount;}else{cov_ateh8ow58.b[3][1]++;cov_ateh8ow58.s[41]++;return"Input is empty";}}//END CONDWORDCOUNT
/**
 * This function determines the specific frequency of a word that follows
 * another word and returns an object with objects as values containing that
 * information. I.E {Blue: {Red: 0.5, Tan: 0.5}, Red: {Green: 1.0}, etc: {}}
 * @param {String} data - The contents of the file.
 * @return {Object} - Object containing both the unique words and their
 * proceeding words frequency by storing another object in the value pairs.
 **/function condWordFreq(data){cov_ateh8ow58.f[3]++;cov_ateh8ow58.s[42]++;//Remove any odd delimiters before processing.
data=removeDelimiters(data);cov_ateh8ow58.s[43]++;if(data.length>0){cov_ateh8ow58.b[8][0]++;/** Keeps temporary track of the number of words in the inner object **/var wordCounter=(cov_ateh8ow58.s[44]++,0.0);/** An array of all of the unique words in data. **/var keys=(cov_ateh8ow58.s[45]++,Object.keys(wordCount(data)));/** This object contains keys with unique words, and values consisting of
    * an object with key-value pairs that determine what word and how many words
    * are after the original key word **/var _condWordFreq=(cov_ateh8ow58.s[46]++,condWordCount(data));/** An array of all of the unique words in _condWordCount's values. **/var tempKeys;//Run through each KEY in _condWordCount to get a VALUE.
cov_ateh8ow58.s[47]++;for(var i=0;i<keys.length;i++){cov_ateh8ow58.s[48]++;tempKeys=Object.keys(_condWordFreq[keys[i]]);//Traverse through keys of the value object and get inner values.
cov_ateh8ow58.s[49]++;for(var j=0;j<tempKeys.length;j++){cov_ateh8ow58.s[50]++;//Add up the total words in this one key.
wordCounter+=_condWordFreq[keys[i]][tempKeys[j]];}//Repeat the iteration, this time modifying the frequency.
cov_ateh8ow58.s[51]++;for(var k=0;k<tempKeys.length;k++){cov_ateh8ow58.s[52]++;_condWordFreq[keys[i]][tempKeys[k]]=_condWordFreq[keys[i]][tempKeys[k]]/wordCounter;}//Reset the word counter to count a new pair of values.
cov_ateh8ow58.s[53]++;wordCounter=0.0;}cov_ateh8ow58.s[54]++;return _condWordFreq;}else{cov_ateh8ow58.b[8][1]++;cov_ateh8ow58.s[55]++;return"Input is empty";}}/**
 * Replaces all \n, \r, and \t in a string with a space, only if there is not
 * a space in the previous character. Otherwise, it is just removed.
 * @param {String} data - String containing all of the words in a file.
 * @return {String} - data except without newline characters, tabs, and another
 * types of delimiters. [\r, \t, \n]
 **/function removeDelimiters(data){cov_ateh8ow58.f[4]++;var temp=(cov_ateh8ow58.s[56]++,"");var previousSpace=(cov_ateh8ow58.s[57]++,false);//If we find '\n', '\r', or '\t' characters, we do not put them in the
//temporary string.
cov_ateh8ow58.s[58]++;for(var s in data){cov_ateh8ow58.s[59]++;if((cov_ateh8ow58.b[10][0]++,data[s]!="\n")&&(cov_ateh8ow58.b[10][1]++,data[s]!="\r")&&(cov_ateh8ow58.b[10][2]++,data[s]!="\t")&&(cov_ateh8ow58.b[10][3]++,data[s]!=",")&&(cov_ateh8ow58.b[10][4]++,data[s]!=".")&&(cov_ateh8ow58.b[10][5]++,data[s]!="?")&&(cov_ateh8ow58.b[10][6]++,data[s]!="\'")&&(cov_ateh8ow58.b[10][7]++,data[s]!="\"")&&(cov_ateh8ow58.b[10][8]++,data[s]!=";")&&(cov_ateh8ow58.b[10][9]++,data[s]!=":")&&(cov_ateh8ow58.b[10][10]++,data[s]!="-")&&(cov_ateh8ow58.b[10][11]++,data[s]!="!")&&(cov_ateh8ow58.b[10][12]++,data[s]!=" ")){cov_ateh8ow58.b[9][0]++;cov_ateh8ow58.s[60]++;temp+=data[s];}else//There is no whitespace before, place one instead of an escape char.
{cov_ateh8ow58.b[9][1]++;cov_ateh8ow58.s[61]++;if(temp[temp.length-1]!=" "){cov_ateh8ow58.b[11][0]++;cov_ateh8ow58.s[62]++;temp+=" ";}else{cov_ateh8ow58.b[11][1]++;}}}//Return the new string, which is like the old string, only does not
//contain '\n', '\r', or '\t' characters.
cov_ateh8ow58.s[63]++;return temp;}