var cov_pnyap0ojc=function(){var path="/Users/kevinfilanowski/Documents/School/WCU/CS/CS253 Software Development/Git Repo/JS_project3/app/qa/tests_data_structures.js",hash="973f1442ff0cfd1782d3534b17073b457c7aea71",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/kevinfilanowski/Documents/School/WCU/CS/CS253 Software Development/Git Repo/JS_project3/app/qa/tests_data_structures.js",statementMap:{"0":{start:{line:7,column:13},end:{line:7,column:35}},"1":{start:{line:8,column:22},end:{line:8,column:54}},"2":{start:{line:9,column:9},end:{line:9,column:22}},"3":{start:{line:12,column:0},end:{line:127,column:3}},"4":{start:{line:14,column:14},end:{line:14,column:18}},"5":{start:{line:15,column:14},end:{line:15,column:18}},"6":{start:{line:16,column:14},end:{line:16,column:18}},"7":{start:{line:17,column:14},end:{line:17,column:18}},"8":{start:{line:20,column:2},end:{line:26,column:5}},"9":{start:{line:22,column:4},end:{line:22,column:86}},"10":{start:{line:23,column:4},end:{line:23,column:85}},"11":{start:{line:24,column:4},end:{line:24,column:85}},"12":{start:{line:25,column:4},end:{line:25,column:87}},"13":{start:{line:41,column:2},end:{line:47,column:5}},"14":{start:{line:43,column:4},end:{line:43,column:17}},"15":{start:{line:44,column:4},end:{line:44,column:17}},"16":{start:{line:45,column:4},end:{line:45,column:17}},"17":{start:{line:46,column:4},end:{line:46,column:17}},"18":{start:{line:51,column:2},end:{line:68,column:5}},"19":{start:{line:52,column:4},end:{line:55,column:7}},"20":{start:{line:53,column:6},end:{line:54,column:35}},"21":{start:{line:57,column:4},end:{line:59,column:7}},"22":{start:{line:58,column:6},end:{line:58,column:76}},"23":{start:{line:61,column:4},end:{line:63,column:7}},"24":{start:{line:62,column:6},end:{line:62,column:77}},"25":{start:{line:65,column:4},end:{line:67,column:7}},"26":{start:{line:66,column:6},end:{line:66,column:86}},"27":{start:{line:71,column:2},end:{line:87,column:5}},"28":{start:{line:72,column:4},end:{line:74,column:7}},"29":{start:{line:73,column:6},end:{line:73,column:91}},"30":{start:{line:76,column:4},end:{line:78,column:7}},"31":{start:{line:77,column:6},end:{line:77,column:79}},"32":{start:{line:80,column:4},end:{line:82,column:7}},"33":{start:{line:81,column:6},end:{line:81,column:76}},"34":{start:{line:84,column:4},end:{line:86,column:7}},"35":{start:{line:85,column:6},end:{line:85,column:91}},"36":{start:{line:90,column:2},end:{line:106,column:5}},"37":{start:{line:91,column:4},end:{line:93,column:7}},"38":{start:{line:92,column:6},end:{line:92,column:139}},"39":{start:{line:95,column:4},end:{line:97,column:7}},"40":{start:{line:96,column:6},end:{line:96,column:104}},"41":{start:{line:99,column:4},end:{line:101,column:7}},"42":{start:{line:100,column:6},end:{line:100,column:81}},"43":{start:{line:103,column:4},end:{line:105,column:7}},"44":{start:{line:104,column:6},end:{line:104,column:139}},"45":{start:{line:109,column:2},end:{line:125,column:5}},"46":{start:{line:110,column:4},end:{line:112,column:7}},"47":{start:{line:111,column:6},end:{line:111,column:148}},"48":{start:{line:114,column:4},end:{line:116,column:7}},"49":{start:{line:115,column:6},end:{line:115,column:107}},"50":{start:{line:118,column:4},end:{line:120,column:7}},"51":{start:{line:119,column:6},end:{line:119,column:80}},"52":{start:{line:122,column:4},end:{line:124,column:7}},"53":{start:{line:123,column:6},end:{line:123,column:148}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:12,column:38},end:{line:12,column:39}},loc:{start:{line:12,column:49},end:{line:127,column:1}},line:12},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:14},end:{line:20,column:15}},loc:{start:{line:20,column:25},end:{line:26,column:3}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:17},end:{line:41,column:18}},loc:{start:{line:41,column:28},end:{line:47,column:3}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:51,column:45},end:{line:51,column:46}},loc:{start:{line:51,column:56},end:{line:68,column:3}},line:51},"4":{name:"(anonymous_4)",decl:{start:{line:52,column:70},end:{line:52,column:71}},loc:{start:{line:52,column:81},end:{line:55,column:5}},line:52},"5":{name:"(anonymous_5)",decl:{start:{line:57,column:59},end:{line:57,column:60}},loc:{start:{line:57,column:70},end:{line:59,column:5}},line:57},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:47},end:{line:61,column:48}},loc:{start:{line:61,column:58},end:{line:63,column:5}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:65,column:71},end:{line:65,column:72}},loc:{start:{line:65,column:82},end:{line:67,column:5}},line:65},"8":{name:"(anonymous_8)",decl:{start:{line:71,column:44},end:{line:71,column:45}},loc:{start:{line:71,column:55},end:{line:87,column:3}},line:71},"9":{name:"(anonymous_9)",decl:{start:{line:72,column:75},end:{line:72,column:76}},loc:{start:{line:72,column:86},end:{line:74,column:5}},line:72},"10":{name:"(anonymous_10)",decl:{start:{line:76,column:61},end:{line:76,column:62}},loc:{start:{line:76,column:72},end:{line:78,column:5}},line:76},"11":{name:"(anonymous_11)",decl:{start:{line:80,column:46},end:{line:80,column:47}},loc:{start:{line:80,column:57},end:{line:82,column:5}},line:80},"12":{name:"(anonymous_12)",decl:{start:{line:84,column:76},end:{line:84,column:77}},loc:{start:{line:84,column:87},end:{line:86,column:5}},line:84},"13":{name:"(anonymous_13)",decl:{start:{line:90,column:49},end:{line:90,column:50}},loc:{start:{line:90,column:60},end:{line:106,column:3}},line:90},"14":{name:"(anonymous_14)",decl:{start:{line:91,column:119},end:{line:91,column:120}},loc:{start:{line:91,column:130},end:{line:93,column:5}},line:91},"15":{name:"(anonymous_15)",decl:{start:{line:95,column:83},end:{line:95,column:84}},loc:{start:{line:95,column:94},end:{line:97,column:5}},line:95},"16":{name:"(anonymous_16)",decl:{start:{line:99,column:47},end:{line:99,column:48}},loc:{start:{line:99,column:58},end:{line:101,column:5}},line:99},"17":{name:"(anonymous_17)",decl:{start:{line:103,column:120},end:{line:103,column:121}},loc:{start:{line:103,column:131},end:{line:105,column:5}},line:103},"18":{name:"(anonymous_18)",decl:{start:{line:109,column:48},end:{line:109,column:49}},loc:{start:{line:109,column:59},end:{line:125,column:3}},line:109},"19":{name:"(anonymous_19)",decl:{start:{line:110,column:129},end:{line:110,column:130}},loc:{start:{line:110,column:140},end:{line:112,column:5}},line:110},"20":{name:"(anonymous_20)",decl:{start:{line:114,column:87},end:{line:114,column:88}},loc:{start:{line:114,column:98},end:{line:116,column:5}},line:114},"21":{name:"(anonymous_21)",decl:{start:{line:118,column:47},end:{line:118,column:48}},loc:{start:{line:118,column:58},end:{line:120,column:5}},line:118},"22":{name:"(anonymous_22)",decl:{start:{line:122,column:130},end:{line:122,column:131}},loc:{start:{line:122,column:141},end:{line:124,column:5}},line:122}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/**
 * tests_data_structures.js Is TDD testing for the data_structures.js file.
 * @author Kevin Filanowski
 * @version 04/15/2018
**/var assert=(cov_pnyap0ojc.s[0]++,require('chai').assert);var data_structures=(cov_pnyap0ojc.s[1]++,require("../data_structures.js"));var fs=(cov_pnyap0ojc.s[2]++,require("fs"));/** A test suite for testing the wordCount function. **/cov_pnyap0ojc.s[3]++;suite("Test data_structures.js file",function(){cov_pnyap0ojc.f[0]++;/** Test fixtures, created for the entire suite. **/var dataA=(cov_pnyap0ojc.s[4]++,null);var dataB=(cov_pnyap0ojc.s[5]++,null);var dataC=(cov_pnyap0ojc.s[6]++,null);var dataD=(cov_pnyap0ojc.s[7]++,null);/** Called as the test suite begins, useful for setting up things**/cov_pnyap0ojc.s[8]++;suiteSetup(function(){cov_pnyap0ojc.f[1]++;cov_pnyap0ojc.s[9]++;//BEFORE
dataA=fs.readFileSync("./qa/textSamples/rbbrrg_input_text.txt","utf-8").trim();cov_pnyap0ojc.s[10]++;dataB=fs.readFileSync("./qa/textSamples/rbrbb_input_text.txt","utf-8").trim();cov_pnyap0ojc.s[11]++;dataC=fs.readFileSync("./qa/textSamples/empty_input_text.txt","utf-8").trim();cov_pnyap0ojc.s[12]++;dataD=fs.readFileSync("./qa/textSamples/newline_input_text.txt","utf-8").trim();});/**Called before each unit test to set up fixtures for testing purposes **///setup( function() {
//BEFORE EACH
//What do i put in here?..
//});
/**Called after each function to reset objects, or tear down things after **///teardown( function() {
//AFTER EACH
//what do i put in here?..
//});
/**Called as the test suite ends. Useful for tearing down any objects or other things needed **/cov_pnyap0ojc.s[13]++;suiteTeardown(function(){cov_pnyap0ojc.f[2]++;cov_pnyap0ojc.s[14]++;//AFTER
dataA=null;cov_pnyap0ojc.s[15]++;dataB=null;cov_pnyap0ojc.s[16]++;dataC=null;cov_pnyap0ojc.s[17]++;dataD=null;});/**BELOW HERE ARE THE UNIT TESTS**//**Testing the WordCount function**/cov_pnyap0ojc.s[18]++;suite("Unit tests for wordCount function",function(){cov_pnyap0ojc.f[3]++;cov_pnyap0ojc.s[19]++;test("Test if rbbrrg_input_text is {red: 3, blue: 2, green: 1}.",function(){cov_pnyap0ojc.f[4]++;cov_pnyap0ojc.s[20]++;assert.deepEqual(data_structures.wordCount(dataA),{red:3,blue:2,green:1});});cov_pnyap0ojc.s[21]++;test("Test if rbrbb_input_text is {red: 2, blue: 3}.",function(){cov_pnyap0ojc.f[5]++;cov_pnyap0ojc.s[22]++;assert.deepEqual(data_structures.wordCount(dataB),{red:2,blue:3});});cov_pnyap0ojc.s[23]++;test("Test if empty_input_text is empty.",function(){cov_pnyap0ojc.f[6]++;cov_pnyap0ojc.s[24]++;assert.strictEqual(data_structures.wordCount(dataC),"Input is empty");});cov_pnyap0ojc.s[25]++;test("Test if newline_input_text is {red: 3, blue: 2, green: 1}.",function(){cov_pnyap0ojc.f[7]++;cov_pnyap0ojc.s[26]++;assert.deepEqual(data_structures.wordCount(dataD),{red:3,blue:2,green:1});});});//END WORDCOUNT TESTS
/** Testing the WordFreq Function **/cov_pnyap0ojc.s[27]++;suite("Unit tests for wordFreq function",function(){cov_pnyap0ojc.f[8]++;cov_pnyap0ojc.s[28]++;test("Test if rbbrrg_input_text is {red: 0.5, blue: 1/3, green: 1/6}",function(){cov_pnyap0ojc.f[9]++;cov_pnyap0ojc.s[29]++;assert.deepEqual(data_structures.wordFreq(dataA),{red:0.5,blue:1/3,green:1/6});});cov_pnyap0ojc.s[30]++;test("Test if rbrbb_input_text is {red: 2/5, blue: 3/5",function(){cov_pnyap0ojc.f[10]++;cov_pnyap0ojc.s[31]++;assert.deepEqual(data_structures.wordFreq(dataB),{red:2/5,blue:3/5});});cov_pnyap0ojc.s[32]++;test("Test if empty_input_text is empty",function(){cov_pnyap0ojc.f[11]++;cov_pnyap0ojc.s[33]++;assert.strictEqual(data_structures.wordFreq(dataC),"Input is empty");});cov_pnyap0ojc.s[34]++;test("Test if newline_input_text is {red: 1/2, blue: 1/3, green: 1/6}",function(){cov_pnyap0ojc.f[12]++;cov_pnyap0ojc.s[35]++;assert.deepEqual(data_structures.wordFreq(dataD),{red:0.5,blue:1/3,green:1/6});});});//END WORDFREQ tests
/** Testing the condWordCount function **/cov_pnyap0ojc.s[36]++;suite("Unit tests for CondWordCount function",function(){cov_pnyap0ojc.f[13]++;cov_pnyap0ojc.s[37]++;test("Test if rbbrrg_input_text is {red: {blue: 1, green: 1, red: 1}, blue: {blue: 1, red: 1}, green: {red: 1}}.",function(){cov_pnyap0ojc.f[14]++;cov_pnyap0ojc.s[38]++;assert.deepEqual(data_structures.condWordCount(dataA),{red:{blue:1,green:1,red:1},blue:{blue:1,red:1},green:{red:1}});});cov_pnyap0ojc.s[39]++;test("Test if rbrbb_input_text is {red: {blue: 2}, blue: {blue: 1, red: 2}}.",function(){cov_pnyap0ojc.f[15]++;cov_pnyap0ojc.s[40]++;assert.deepEqual(data_structures.condWordCount(dataB),{red:{blue:2},blue:{blue:1,red:2}});});cov_pnyap0ojc.s[41]++;test("Test if empty_input_text is empty.",function(){cov_pnyap0ojc.f[16]++;cov_pnyap0ojc.s[42]++;assert.strictEqual(data_structures.condWordCount(dataC),"Input is empty");});cov_pnyap0ojc.s[43]++;test("Test if newline_input_text is {red: {blue: 1, green: 1, red: 1}, blue: {blue: 1, red: 1}, green: {red: 1}}.",function(){cov_pnyap0ojc.f[17]++;cov_pnyap0ojc.s[44]++;assert.deepEqual(data_structures.condWordCount(dataD),{red:{blue:1,green:1,red:1},blue:{blue:1,red:1},green:{red:1}});});});//END CONDWORDCOUNT TESTS
/** Testing condWordFreq function**/cov_pnyap0ojc.s[45]++;suite("Unit tests for condWordFreq function",function(){cov_pnyap0ojc.f[18]++;cov_pnyap0ojc.s[46]++;test("Test if rbbrrg_input_text is {red: {blue: 1/3, green: 1/3, red: 1/3}, blue: {blue: 0.5, red: 0.5}, green: {red: 1}}.",function(){cov_pnyap0ojc.f[19]++;cov_pnyap0ojc.s[47]++;assert.deepEqual(data_structures.condWordFreq(dataA),{red:{blue:1/3,green:1/3,red:1/3},blue:{blue:0.5,red:0.5},green:{red:1}});});cov_pnyap0ojc.s[48]++;test("Test if rbrbb_input_text is {red: {blue: 1}, blue: {blue: 1/3, red: 2/3}}.",function(){cov_pnyap0ojc.f[20]++;cov_pnyap0ojc.s[49]++;assert.deepEqual(data_structures.condWordFreq(dataB),{red:{blue:1},blue:{blue:1/3,red:2/3}});});cov_pnyap0ojc.s[50]++;test("Test if empty_input_text is empty.",function(){cov_pnyap0ojc.f[21]++;cov_pnyap0ojc.s[51]++;assert.strictEqual(data_structures.condWordFreq(dataC),"Input is empty");});cov_pnyap0ojc.s[52]++;test("Test if newline_input_text is {red: {blue: 1/3, green: 1/3, red: 1/3}, blue: {blue: 0.5, red: 0.5}, green: {red: 1}}.",function(){cov_pnyap0ojc.f[22]++;cov_pnyap0ojc.s[53]++;assert.deepEqual(data_structures.condWordFreq(dataD),{red:{blue:1/3,green:1/3,red:1/3},blue:{blue:0.5,red:0.5},green:{red:1}});});});//END CONDWORDFREQ TESTS
});//END DATA_STRUCTURES TEST SUITE